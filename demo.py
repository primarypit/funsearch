from tspTestset_NS import tsp_test_data_NS

specification = r'''
import numpy as np

def solve_tsp(matrix: np.ndarray) -> tuple[float, list[int, ...]]:
    """
    args:
        matrix: distance matrix of the problem.

    return:
        totaldist: average distance of a step for visiting all the position.
        route: the sequence of position visited in order.
    """
    route = []
    totaldist = 0

    dim = matrix.shape[0]
    visited = [False] * dim
    start_pos = np.random.randint(0,dim)

    visited[start_pos] = True
    route.append(start_pos)
    cur_pos = start_pos

    while len(route) < dim:
        scores = heuristic(cur_pos, matrix, visited)
        scores[np.array(visited)] = -np.inf
        next_pos = np.argmax(scores)

        totaldist += matrix[cur_pos, next_pos]
        cur_pos = next_pos
        visited[cur_pos] = True
        route.append(next_pos)

    for v in visited:
      if v == False:
        raise Exception("Some places not visited!")

    return np.exp(-totaldist / dim), route

@funsearch.run
def evaluation(testcase) -> tuple[float, list[int, ...]]:
    ad, route = solve_tsp(testcase)
    return ad, route


@funsearch.evolve
def heuristic(cur_position: int, matrix: np.ndarray, visited: list) -> np.ndarray:
    """
    This is a heuristic func
    args:
        cur_position: index of current postion.
        matrix: distance matrix of the problem.
        visited: an array recording whether a position is visited or not

    return:
        array of priority score of all ohter positions.
    """

    distances = matrix[cur_position]

    score = -np.log(distances + 1e-10)

    score[np.array(visited)] = -np.inf

    return score
'''

import time
import json
import multiprocessing
from typing import Collection, Any
import http.client
from implementation import sampler
from implementation import evaluator
from implementation import evaluator_accelerate
from implementation import funsearch
from implementation import funsearch_NS
from implementation import config
from tensorboard import notebook

def _trim_preface_of_body(sample: str) -> str:
    """Trim the redundant descriptions/symbols/'def' declaration before the function body.
    Please see my comments in sampler.LLM (in sampler.py).
    Since the LLM used in this file is not a pure code completion LLM, this trim function is required.

    -Example sample (function & description generated by LLM):
    -------------------------------------
    This is the optimized function ...
    def priority_v2(...) -> ...:
        return ...
    This function aims to ...
    -------------------------------------
    -This function removes the description above the function's signature, and the function's signature.
    -The indent of the code is preserved.
    -Return of this function:
    -------------------------------------
        return ...
    This function aims to ...
    -------------------------------------
    """
    lines = sample.splitlines()
    func_body_lineno = 0
    find_def_declaration = False
    for lineno, line in enumerate(lines):
        # find the first 'def' statement in the given code
        if line[:3] == 'def':
            func_body_lineno = lineno
            find_def_declaration = True
            break
    if find_def_declaration:
        code = ''
        for line in lines[func_body_lineno + 1:]:
            code += line + '\n'
        return code
    return sample

class LLMAPI(sampler.LLM):
    """Language model that predicts continuation of provided source code.
    """

    def __init__(self, samples_per_prompt: int, trim=True):
        super().__init__(samples_per_prompt)
        additional_prompt = ('Complete a different and more complex Python function. '
                    'Be creative and you can insert multiple if-else and for-loop in the code logic.'
                    'Only output the Python code, no descriptions.')
        self._additional_prompt = additional_prompt
        self._trim = trim

    def draw_samples(self, prompt: str) -> Collection[str]:
        """Returns multiple predicted continuations of `prompt`."""
        return [self._draw_sample(prompt) for _ in range(self._samples_per_prompt)]

    def _draw_sample(self, content: str) -> str:
        prompt = '\n'.join([content, self._additional_prompt])
        while True:
            try:
                conn = http.client.HTTPSConnection("api.chatanywhere.com.cn")
                conn.timeout = 10 # avoid stuck in handshake

                payload = json.dumps({
                    "max_tokens": 512,
                    "model": "gpt-3.5-turbo",
                    "messages": [
                        {
                            "role": "user",
                            "content": prompt
                        }
                    ]
                })
                headers = {
                    'Authorization': '***',
                    'User-Agent': 'Apifox/1.0.0 (https://apifox.com)',
                    'Content-Type': 'application/json'
                }
                conn.request("POST", "/v1/chat/completions", payload, headers)
                res = conn.getresponse()
                data = res.read().decode("utf-8")
                data = json.loads(data)
                response = data['choices'][0]['message']['content']
                # trim function
                if self._trim:
                    response = _trim_preface_of_body(response)
                return response
            except TimeoutError:
                print("Request timed out after", 10, "seconds")
                time.sleep(2)
                continue
            except Exception as e:
                print(e)
                print("Failed to get response, please check your API key."
                      "If the response code is 500, the mistake may caused by the OpenAI's server."
                )
                time.sleep(2)
                continue

class Sandbox(evaluator.Sandbox):
    """Sandbox for executing generated code. Implemented by RZ.

    RZ: Sandbox returns the 'score' of the program and:
    1) avoids the generated code to be harmful (accessing the internet, take up too much RAM).
    2) stops the execution of the code in time (avoid endless loop).
    """

    def __init__(self, verbose=False, numba_accelerate=True):
        """
        Args:
            verbose         : Print evaluate information.
            numba_accelerate: Use numba to accelerate the evaluation. It should be noted that not all numpy functions
                              support numba acceleration, such as np.piecewise().
        """
        self._verbose = verbose
        self._numba_accelerate = numba_accelerate

    def run(
            self,
            program: str,
            function_to_run: str,  # RZ: refers to the name of the function to run (e.g., 'evaluate')
            function_to_evolve: str,  # RZ: accelerate the code by decorating @numba.jit() on function_to_evolve.
            inputs: Any,  # refers to the dataset
            test_input: str,  # refers to the current instance
            timeout_seconds: int,
            **kwargs  # RZ: add this
    ) -> tuple[Any, bool]:
        """Returns `function_to_run(test_input)` and whether execution succeeded.

        RZ: If the generated code (generated by LLM) is executed successfully,
        the output of this function is the score of a given program.
        RZ: PLEASE NOTE THAT this SandBox is only designed for bin-packing problem.
        """
        dataset = inputs[test_input]
        try:
            result_queue = multiprocessing.Queue()
            process = multiprocessing.Process(
                target=self._compile_and_run_function,
                args=(program, function_to_run, function_to_evolve, dataset, self._numba_accelerate, result_queue)
            )
            process.start()
            process.join(timeout=timeout_seconds)
            if process.is_alive():
                # if the process is not finished in time, we consider the program illegal
                process.terminate()
                process.join()
                results = None, False
            else:
                if not result_queue.empty():
                    results = result_queue.get_nowait()
                else:
                    results = None, False

            return results
        except Exception as e:
            with open("error.txt","a",encoding="utf-8") as f:
              f.write(e)
              f.write("\n\n")
            return None, False

    def _compile_and_run_function(self, program, function_to_run, function_to_evolve, dataset, numba_accelerate,
                                  result_queue):
        try:
            # optimize the code (decorate function_to_run with @numba.jit())
            if numba_accelerate:
                program = evaluator_accelerate.add_numba_decorator(
                    program=program,
                    function_to_evolve=function_to_evolve
                )
            # compile the program, and maps the global func/var/class name to its address
            all_globals_namespace = {}
            # execute the program, map func/var/class to global namespace
            exec(program, all_globals_namespace)
            # get the pointer of 'function_to_run'
            function_to_run = all_globals_namespace[function_to_run]
            # return the execution results
            results = function_to_run(dataset)
            # the results must be int or float
            if not isinstance(results[0], (int, float)):
                result_queue.put((None, False))
                return
            if not isinstance(results[1], list):
                result_queue.put((None, False))
                return
            result_queue.put((results, True))
        except Exception as e:
            # if raise any exception, we assume the execution failed
            e_info = str(e)
            with open("error.txt","a",encoding="utf-8") as f:
              f.write(e_info)
              f.write("\n\n")
            result_queue.put((None, False))

import warnings
warnings.filterwarnings('ignore')

if __name__ == '__main__':
    class_config = config.ClassConfig(llm_class=LLMAPI, sandbox_class=Sandbox)
    config = config.Config(samples_per_prompt=4)
    global_max_sample_num = 300
    funsearch_NS.main(
        specification=specification,
        inputs=tsp_test_data_NS,
        config=config,
        max_sample_nums=global_max_sample_num,
        class_config=class_config,
        log_dir='../logs_NS/demo1'
    )